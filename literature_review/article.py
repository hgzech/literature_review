# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/02_article.ipynb (unless otherwise specified).

__all__ = ['Article', 'make_articles']

# Cell
import os
import json

# Cell
class Article():
    def __init__(self, path):
        with open(path, 'r') as fp:
            _dict = json.load(fp)

        self.path = path # This is subideal architecture
        self.authors = _dict['authors']
        self.pub_date = _dict['pub_date']
        self.title = _dict['title']
        self.abstract = _dict['abstract']
        self.sections = _dict['sections']
        self.references = _dict['references']
        self.figures = _dict['figures']
        self.doi = _dict['doi']
        if 'annotations' in _dict.keys():
            self.annotations = _dict['annotations']
        else:
            self.annotations = {}
        self.get_author_list()
        self.get_year()

    def get_author_list(self):
        authors = self.authors.split(';')


        try:
            authors = [a.split() for a in authors]
            authors = [a[-1] for a in authors if len(a)]

        except:
            print(authors)
            authors = []
        self.author_list = authors

    def get_year(self):
        if self.pub_date:
            self.year = self.pub_date.split('-')[0]
        else:
            self.year = None


    def __iter__(self):
        yield 'authors', self.authors
        yield 'pub_date', self.pub_date
        yield 'title', self.title
        yield 'abstract', self.abstract
        yield 'sections', self.sections
        yield 'references', self.references
        yield 'figures', self.figures
        yield 'doi', self.doi
        yield 'annotations', self.annotations
        yield 'path', self.path

    def __dict__(self):
        _dict = {}
        _dict['authors'] = self.authors
        _dict['pub_date'] = self.pub_date
        _dict['title'] = self.title
        _dict['abstract'] = self.abstract
        _dict['sections'] = self.sections
        _dict['references'] = self.references
        _dict['figures'] = self.figures
        _dict['doi'] = self.doi
        _dict['annotations'] = self.annotations
        _dict['path'] = self.path
        return _dict


    def __repr__(self):
        if len(self.author_list):
            return "%s (%s). %s."%(self.author_list[0],self.year, self.title)
        else:
            return "None (%s). %s."%(self.year, self.title)

# Cell
def make_articles(infolder):
    articles = []
    files = os.listdir(infolder)
    for file in files:
        if file.endswith('.json'):
            path = os.path.join(infolder, file)
            articles.append(Article(path))
    return articles
